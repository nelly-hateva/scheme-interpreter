module Interpreter
  grammar Scheme
    rule program
      expression
    end

    rule expression
      whitespace e:( atom / primitive / defination / define_function / if_else / function ) whitespace
      {
        def to_sexp
          e.to_sexp
        end
      }
    end

    rule expressions
      expression*
      {
        def to_sexp
          elements.map { |e| e.to_sexp }
        end
      }
    end

    rule atom
      string / number / symbol / boolean
    end

    rule string
      '"' ('\\"' / [^"])* '"'
      {
        def to_sexp
          [:string, text_value[1..-2]]
        end
      }
    end

    rule number
      real / integer / rational / complex
    end
    
    rule real
      ('+' / '-')? digit+ '.' digit+ ( [eE] ('+' / '-')? digit+ )?
      {
        def to_sexp
          [:number, Float(text_value)]
        end
      }
    end

    rule integer
      ('+' / '-')? digit+
      {
        def to_sexp
          [:number, Integer(text_value)]
        end
      }
    end

    rule rational
      numerator:(('+' / '-')? digit+) '/' denominator:(digit+)
      {
        def to_sexp
          [:number, Rational(numerator, denominator)]
        end
      }
    end

    rule complex
      real:(real / integer) "+" imaginary:(real / integer) "i"
      {
        def to_sexp
          [:number, Complex(real, imaginary)]
        end
      }
    end

    rule digit
      [0-9]
    end

    rule symbol
      whitespace ('-')? [a-z] [a-z0-9_-]*
      {
        def to_sexp
          [:symbol, text_value.strip.to_sym]
        end
      }
    end

    rule symbols
      symbol*
      {
        def to_sexp
          elements.map { |e| e.to_sexp }
        end
      }
    end

    rule boolean
      '#' [tTfF]
      {
        def to_sexp
          [:boolean, text_value[1].downcase.to_sym]
        end
      }
    end

    rule whitespace
      [ \n]*
    end

    rule left_parenthesis
      whitespace '(' whitespace
    end

    rule right_parenthesis
      whitespace ')' whitespace
    end

    rule primitive
      left_parenthesis operator:primitive_operator args:expressions right_parenthesis
      {
        def to_sexp
          [operator.text_value.to_sym, args.to_sexp]
        end
      }
    end

    rule primitive_operator
      '/' / '*' / '+' / '-' / '==' / '<' / '<=' / '>' / '>=' / '!=' / 'and' / 'or' / 'not'
    end

    rule defination
      left_parenthesis 'define' symbol whitespace e:( atom / primitive ) right_parenthesis
      {
        def to_sexp
          [:define, symbol.to_sexp, e.to_sexp]
        end
      }
    end

    rule define_function
      left_parenthesis 'define' left_parenthesis operator:symbol arguments:symbols right_parenthesis
        body:expression right_parenthesis
      {
        def to_sexp
          [:define_function, operator.to_sexp, arguments.to_sexp, body.to_sexp]
        end
      }
    end

    rule function
      left_parenthesis operator:symbol arguments:expressions right_parenthesis
      {
        def to_sexp
          [:function, operator.to_sexp, arguments.to_sexp]
        end
      }
    end

    rule if_else
      left_parenthesis 'if' test:primitive then_expr:expression else_expr:expression right_parenthesis
      {
        def to_sexp
          [:if, test.to_sexp, then_expr.to_sexp, else_expr.to_sexp]
        end
      }
    end
  end
end